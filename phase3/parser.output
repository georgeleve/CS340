Terminals unused in grammar

    AND
    OR
    PLUS
    MUL
    DIV
    MODULO
    EQUAL
    NOT_EQUAL
    GREATER
    LESS
    GREATER_EQUAL
    LESS_EQUAL
    UMINUS


State 38 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | %empty

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | BREAK SEMICOLON
    9     | CONTINUE SEMICOLON
   10     | block
   11     | funcdef
   12     | SEMICOLON

   13 expr: assignexpr
   14     | term

   15 term: LEFT_PARENTH expr RIGHT_PARENTH
   16     | MINUS expr
   17     | NOT expr
   18     | PLUS_PLUS lvalue
   19     | lvalue PLUS_PLUS
   20     | MINUS_MINUS lvalue
   21     | lvalue MINUS_MINUS
   22     | primary

   23 assignexpr: ID ASSIGN expr
   24           | LOCAL ID ASSIGN expr
   25           | DOUBLE_COLON ID ASSIGN expr
   26           | ID ASSIGN funcdef
   27           | LOCAL ID ASSIGN funcdef
   28           | DOUBLE_COLON ID ASSIGN funcdef
   29           | member ASSIGN expr

   30 primary: lvalue
   31        | call
   32        | objectdef
   33        | LEFT_PARENTH funcdef RIGHT_PARENTH
   34        | const

   35 lvalue: ID
   36       | LOCAL ID
   37       | DOUBLE_COLON ID
   38       | member

   39 member: lvalue DOT ID
   40       | lvalue LEFT_BRACKET expr RIGHT_BRACKET
   41       | call DOT ID
   42       | call LEFT_BRACKET expr RIGHT_BRACKET

   43 call: call LEFT_PARENTH elist RIGHT_PARENTH
   44     | lvalue callsuffix
   45     | LEFT_PARENTH funcdef RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH

   46 callsuffix: normcall
   47           | methodcall

   48 normcall: LEFT_PARENTH elist RIGHT_PARENTH

   49 methodcall: DOT_DOT ID LEFT_PARENTH elist RIGHT_PARENTH

   50 elist: expr
   51      | elist COMMA expr
   52      | %empty

   53 objectdef: LEFT_BRACKET elist RIGHT_BRACKET
   54          | LEFT_BRACKET indexed RIGHT_BRACKET

   55 indexed: indexedelem
   56        | indexed COMMA indexedelem

   57 $@1: %empty

   58 $@2: %empty

   59 indexedelem: LEFT_BRACE $@1 expr COLON $@2 expr RIGHT_BRACE

   60 temp_stmt: temp_stmt stmt
   61          | %empty

   62 $@3: %empty

   63 $@4: %empty

   64 block: LEFT_BRACE $@3 temp_stmt $@4 RIGHT_BRACE

   65 $@5: %empty

   66 $@6: %empty

   67 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

   68 $@7: %empty

   69 $@8: %empty

   70 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

   71 const: INTEGER
   72      | FLOAT
   73      | STRING
   74      | NIL
   75      | TRUE
   76      | FALSE

   77 idlist: ID
   78       | idlist COMMA ID
   79       | %empty

   80 $@9: %empty

   81 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH $@9 stmt

   82 $@10: %empty

   83 ifstmt: ifstmt ELSE $@10 stmt

   84 $@11: %empty

   85 $@12: %empty

   86 whilestmt: WHILE $@11 LEFT_PARENTH expr RIGHT_PARENTH $@12 stmt

   87 $@13: %empty

   88 $@14: %empty

   89 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

   90 returnstmt: RETURN SEMICOLON

   91 $@15: %empty

   92 returnstmt: RETURN $@15 expr SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <stringval> (258) 23 24 25 26 27 28 35 36 37 39 41 49 67 77 78
    STRING <stringval> (259) 73
    INTEGER <intval> (260) 71
    FLOAT <floatval> (261) 72
    IF <stringval> (262) 81
    ELSE <stringval> (263) 83
    WHILE <stringval> (264) 86
    FOR <stringval> (265) 89
    FUNCTION <stringval> (266) 67 70
    RETURN <stringval> (267) 90 92
    BREAK <stringval> (268) 8
    CONTINUE <stringval> (269) 9
    AND <stringval> (270)
    NOT <stringval> (271) 17
    OR <stringval> (272)
    LOCAL <stringval> (273) 24 27 36
    TRUE <stringval> (274) 75
    FALSE <stringval> (275) 76
    NIL <stringval> (276) 74
    ASSIGN <stringval> (277) 23 24 25 26 27 28 29
    PLUS <stringval> (278)
    MINUS <stringval> (279) 16
    MUL <stringval> (280)
    DIV <stringval> (281)
    MODULO <stringval> (282)
    EQUAL <stringval> (283)
    NOT_EQUAL <stringval> (284)
    PLUS_PLUS <stringval> (285) 18 19
    MINUS_MINUS <stringval> (286) 20 21
    GREATER <stringval> (287)
    LESS <stringval> (288)
    GREATER_EQUAL <stringval> (289)
    LESS_EQUAL <stringval> (290)
    LEFT_BRACE <stringval> (291) 59 64 67 70
    RIGHT_BRACE <stringval> (292) 59 64 67 70
    LEFT_BRACKET <stringval> (293) 40 42 53 54
    RIGHT_BRACKET <stringval> (294) 40 42 53 54
    LEFT_PARENTH <stringval> (295) 15 33 43 45 48 49 67 70 81 86 89
    RIGHT_PARENTH <stringval> (296) 15 33 43 45 48 49 67 70 81 86 89
    SEMICOLON <stringval> (297) 3 8 9 12 89 90 92
    COMMA <stringval> (298) 51 56 78
    COLON <stringval> (299) 59
    DOUBLE_COLON <stringval> (300) 25 28 37
    DOT <stringval> (301) 39 41
    DOT_DOT <stringval> (302) 49
    UMINUS (303)


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1 2
        on right: 0 1
    stmt <stringval> (51)
        on left: 3 4 5 6 7 8 9 10 11 12
        on right: 1 60 81 83 86 89
    expr <exprval> (52)
        on left: 13 14
        on right: 3 15 16 17 23 24 25 29 40 42 50 51 59 81 86 89 92
    term (53)
        on left: 15 16 17 18 19 20 21 22
        on right: 14
    assignexpr (54)
        on left: 23 24 25 26 27 28 29
        on right: 13
    primary <stringval> (55)
        on left: 30 31 32 33 34
        on right: 22
    lvalue <stringval> (56)
        on left: 35 36 37 38
        on right: 18 19 20 21 30 39 40 44
    member <stringval> (57)
        on left: 39 40 41 42
        on right: 29 38
    call <stringval> (58)
        on left: 43 44 45
        on right: 31 41 42 43
    callsuffix <stringval> (59)
        on left: 46 47
        on right: 44
    normcall <stringval> (60)
        on left: 48
        on right: 46
    methodcall <stringval> (61)
        on left: 49
        on right: 47
    elist <stringval> (62)
        on left: 50 51 52
        on right: 43 45 48 49 51 53 89
    objectdef <stringval> (63)
        on left: 53 54
        on right: 32
    indexed <stringval> (64)
        on left: 55 56
        on right: 54 56
    indexedelem <stringval> (65)
        on left: 59
        on right: 55 56
    $@1 (66)
        on left: 57
        on right: 59
    $@2 (67)
        on left: 58
        on right: 59
    temp_stmt <stringval> (68)
        on left: 60 61
        on right: 60 64 67 70
    block <stringval> (69)
        on left: 64
        on right: 10
    $@3 (70)
        on left: 62
        on right: 64
    $@4 (71)
        on left: 63
        on right: 64
    funcdef <stringval> (72)
        on left: 67 70
        on right: 11 26 27 28 33 45
    $@5 (73)
        on left: 65
        on right: 67
    $@6 (74)
        on left: 66
        on right: 67
    $@7 (75)
        on left: 68
        on right: 70
    $@8 (76)
        on left: 69
        on right: 70
    const <stringval> (77)
        on left: 71 72 73 74 75 76
        on right: 34
    idlist (78)
        on left: 77 78 79
        on right: 67 70 78
    ifstmt <stringval> (79)
        on left: 81 83
        on right: 4 83
    $@9 (80)
        on left: 80
        on right: 81
    $@10 (81)
        on left: 82
        on right: 83
    whilestmt <stringval> (82)
        on left: 86
        on right: 5
    $@11 (83)
        on left: 84
        on right: 86
    $@12 (84)
        on left: 85
        on right: 86
    forstmt <stringval> (85)
        on left: 89
        on right: 6
    $@13 (86)
        on left: 87
        on right: 89
    $@14 (87)
        on left: 88
        on right: 89
    returnstmt <stringval> (88)
        on left: 90 92
        on right: 7
    $@15 (89)
        on left: 91
        on right: 92


State 0

    0 $accept: . program $end

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 1

   23 assignexpr: ID . ASSIGN expr
   26           | ID . ASSIGN funcdef
   35 lvalue: ID .

    ASSIGN  shift, and go to state 42

    $default  reduce using rule 35 (lvalue)


State 2

   73 const: STRING .

    $default  reduce using rule 73 (const)


State 3

   71 const: INTEGER .

    $default  reduce using rule 71 (const)


State 4

   72 const: FLOAT .

    $default  reduce using rule 72 (const)


State 5

   81 ifstmt: IF . LEFT_PARENTH expr RIGHT_PARENTH $@9 stmt

    LEFT_PARENTH  shift, and go to state 43


State 6

   86 whilestmt: WHILE . $@11 LEFT_PARENTH expr RIGHT_PARENTH $@12 stmt

    $default  reduce using rule 84 ($@11)

    $@11  go to state 44


State 7

   89 forstmt: FOR . $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

    $default  reduce using rule 87 ($@13)

    $@13  go to state 45


State 8

   67 funcdef: FUNCTION . ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE
   70        | FUNCTION . $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    ID  shift, and go to state 46

    $default  reduce using rule 68 ($@7)

    $@7  go to state 47


State 9

   90 returnstmt: RETURN . SEMICOLON
   92           | RETURN . $@15 expr SEMICOLON

    SEMICOLON  shift, and go to state 48

    $default  reduce using rule 91 ($@15)

    $@15  go to state 49


State 10

    8 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 50


State 11

    9 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 51


State 12

   17 term: NOT . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 52
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 13

   24 assignexpr: LOCAL . ID ASSIGN expr
   27           | LOCAL . ID ASSIGN funcdef
   36 lvalue: LOCAL . ID

    ID  shift, and go to state 53


State 14

   75 const: TRUE .

    $default  reduce using rule 75 (const)


State 15

   76 const: FALSE .

    $default  reduce using rule 76 (const)


State 16

   74 const: NIL .

    $default  reduce using rule 74 (const)


State 17

   16 term: MINUS . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 54
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 18

   18 term: PLUS_PLUS . lvalue

    ID            shift, and go to state 55
    LOCAL         shift, and go to state 56
    LEFT_PARENTH  shift, and go to state 57
    DOUBLE_COLON  shift, and go to state 58

    lvalue  go to state 59
    member  go to state 60
    call    go to state 61


State 19

   20 term: MINUS_MINUS . lvalue

    ID            shift, and go to state 55
    LOCAL         shift, and go to state 56
    LEFT_PARENTH  shift, and go to state 57
    DOUBLE_COLON  shift, and go to state 58

    lvalue  go to state 62
    member  go to state 60
    call    go to state 61


State 20

   64 block: LEFT_BRACE . $@3 temp_stmt $@4 RIGHT_BRACE

    $default  reduce using rule 62 ($@3)

    $@3  go to state 63


State 21

   53 objectdef: LEFT_BRACKET . elist RIGHT_BRACKET
   54          | LEFT_BRACKET . indexed RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 64
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 52 (elist)

    expr         go to state 65
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 66
    objectdef    go to state 34
    indexed      go to state 67
    indexedelem  go to state 68
    const        go to state 37


State 22

   15 term: LEFT_PARENTH . expr RIGHT_PARENTH
   33 primary: LEFT_PARENTH . funcdef RIGHT_PARENTH
   45 call: LEFT_PARENTH . funcdef RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    FUNCTION      shift, and go to state 8
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 69
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 70
    const       go to state 37


State 23

   12 stmt: SEMICOLON .

    $default  reduce using rule 12 (stmt)


State 24

   25 assignexpr: DOUBLE_COLON . ID ASSIGN expr
   28           | DOUBLE_COLON . ID ASSIGN funcdef
   37 lvalue: DOUBLE_COLON . ID

    ID  shift, and go to state 71


State 25

    0 $accept: program . $end

    $end  shift, and go to state 72


State 26

    1 program: stmt . program

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 73
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 27

    3 stmt: expr . SEMICOLON

    SEMICOLON  shift, and go to state 74


State 28

   14 expr: term .

    $default  reduce using rule 14 (expr)


State 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


State 30

   22 term: primary .

    $default  reduce using rule 22 (term)


State 31

   19 term: lvalue . PLUS_PLUS
   21     | lvalue . MINUS_MINUS
   30 primary: lvalue .
   39 member: lvalue . DOT ID
   40       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   44 call: lvalue . callsuffix

    PLUS_PLUS     shift, and go to state 75
    MINUS_MINUS   shift, and go to state 76
    LEFT_BRACKET  shift, and go to state 77
    LEFT_PARENTH  shift, and go to state 78
    DOT           shift, and go to state 79
    DOT_DOT       shift, and go to state 80

    $default  reduce using rule 30 (primary)

    callsuffix  go to state 81
    normcall    go to state 82
    methodcall  go to state 83


State 32

   29 assignexpr: member . ASSIGN expr
   38 lvalue: member .

    ASSIGN  shift, and go to state 84

    $default  reduce using rule 38 (lvalue)


State 33

   31 primary: call .
   41 member: call . DOT ID
   42       | call . LEFT_BRACKET expr RIGHT_BRACKET
   43 call: call . LEFT_PARENTH elist RIGHT_PARENTH

    LEFT_BRACKET  shift, and go to state 85
    LEFT_PARENTH  shift, and go to state 86
    DOT           shift, and go to state 87

    $default  reduce using rule 31 (primary)


State 34

   32 primary: objectdef .

    $default  reduce using rule 32 (primary)


State 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


State 36

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


State 37

   34 primary: const .

    $default  reduce using rule 34 (primary)


State 38

    4 stmt: ifstmt .
   83 ifstmt: ifstmt . ELSE $@10 stmt

    ELSE  shift, and go to state 88

    ELSE      [reduce using rule 4 (stmt)]
    $default  reduce using rule 4 (stmt)


State 39

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 42

   23 assignexpr: ID ASSIGN . expr
   26           | ID ASSIGN . funcdef

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    FUNCTION      shift, and go to state 8
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 89
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 90
    const       go to state 37


State 43

   81 ifstmt: IF LEFT_PARENTH . expr RIGHT_PARENTH $@9 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 91
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 44

   86 whilestmt: WHILE $@11 . LEFT_PARENTH expr RIGHT_PARENTH $@12 stmt

    LEFT_PARENTH  shift, and go to state 92


State 45

   89 forstmt: FOR $@13 . LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

    LEFT_PARENTH  shift, and go to state 93


State 46

   67 funcdef: FUNCTION ID . $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    $default  reduce using rule 65 ($@5)

    $@5  go to state 94


State 47

   70 funcdef: FUNCTION $@7 . LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    LEFT_PARENTH  shift, and go to state 95


State 48

   90 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 90 (returnstmt)


State 49

   92 returnstmt: RETURN $@15 . expr SEMICOLON

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 96
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 50

    8 stmt: BREAK SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 51

    9 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 52

   17 term: NOT expr .

    $default  reduce using rule 17 (term)


State 53

   24 assignexpr: LOCAL ID . ASSIGN expr
   27           | LOCAL ID . ASSIGN funcdef
   36 lvalue: LOCAL ID .

    ASSIGN  shift, and go to state 97

    $default  reduce using rule 36 (lvalue)


State 54

   16 term: MINUS expr .

    $default  reduce using rule 16 (term)


State 55

   35 lvalue: ID .

    $default  reduce using rule 35 (lvalue)


State 56

   36 lvalue: LOCAL . ID

    ID  shift, and go to state 98


State 57

   45 call: LEFT_PARENTH . funcdef RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH

    FUNCTION  shift, and go to state 8

    funcdef  go to state 99


State 58

   37 lvalue: DOUBLE_COLON . ID

    ID  shift, and go to state 100


State 59

   18 term: PLUS_PLUS lvalue .
   39 member: lvalue . DOT ID
   40       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   44 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 77
    LEFT_PARENTH  shift, and go to state 78
    DOT           shift, and go to state 79
    DOT_DOT       shift, and go to state 80

    $default  reduce using rule 18 (term)

    callsuffix  go to state 81
    normcall    go to state 82
    methodcall  go to state 83


State 60

   38 lvalue: member .

    $default  reduce using rule 38 (lvalue)


State 61

   41 member: call . DOT ID
   42       | call . LEFT_BRACKET expr RIGHT_BRACKET
   43 call: call . LEFT_PARENTH elist RIGHT_PARENTH

    LEFT_BRACKET  shift, and go to state 85
    LEFT_PARENTH  shift, and go to state 86
    DOT           shift, and go to state 87


State 62

   20 term: MINUS_MINUS lvalue .
   39 member: lvalue . DOT ID
   40       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   44 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 77
    LEFT_PARENTH  shift, and go to state 78
    DOT           shift, and go to state 79
    DOT_DOT       shift, and go to state 80

    $default  reduce using rule 20 (term)

    callsuffix  go to state 81
    normcall    go to state 82
    methodcall  go to state 83


State 63

   64 block: LEFT_BRACE $@3 . temp_stmt $@4 RIGHT_BRACE

    $default  reduce using rule 61 (temp_stmt)

    temp_stmt  go to state 101


State 64

   59 indexedelem: LEFT_BRACE . $@1 expr COLON $@2 expr RIGHT_BRACE

    $default  reduce using rule 57 ($@1)

    $@1  go to state 102


State 65

   50 elist: expr .

    $default  reduce using rule 50 (elist)


State 66

   51 elist: elist . COMMA expr
   53 objectdef: LEFT_BRACKET elist . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 103
    COMMA          shift, and go to state 104


State 67

   54 objectdef: LEFT_BRACKET indexed . RIGHT_BRACKET
   56 indexed: indexed . COMMA indexedelem

    RIGHT_BRACKET  shift, and go to state 105
    COMMA          shift, and go to state 106


State 68

   55 indexed: indexedelem .

    $default  reduce using rule 55 (indexed)


State 69

   15 term: LEFT_PARENTH expr . RIGHT_PARENTH

    RIGHT_PARENTH  shift, and go to state 107


State 70

   33 primary: LEFT_PARENTH funcdef . RIGHT_PARENTH
   45 call: LEFT_PARENTH funcdef . RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH

    RIGHT_PARENTH  shift, and go to state 108


State 71

   25 assignexpr: DOUBLE_COLON ID . ASSIGN expr
   28           | DOUBLE_COLON ID . ASSIGN funcdef
   37 lvalue: DOUBLE_COLON ID .

    ASSIGN  shift, and go to state 109

    $default  reduce using rule 37 (lvalue)


State 72

    0 $accept: program $end .

    $default  accept


State 73

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 74

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


State 75

   19 term: lvalue PLUS_PLUS .

    $default  reduce using rule 19 (term)


State 76

   21 term: lvalue MINUS_MINUS .

    $default  reduce using rule 21 (term)


State 77

   40 member: lvalue LEFT_BRACKET . expr RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 110
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 78

   48 normcall: LEFT_PARENTH . elist RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 52 (elist)

    expr        go to state 65
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 111
    objectdef   go to state 34
    const       go to state 37


State 79

   39 member: lvalue DOT . ID

    ID  shift, and go to state 112


State 80

   49 methodcall: DOT_DOT . ID LEFT_PARENTH elist RIGHT_PARENTH

    ID  shift, and go to state 113


State 81

   44 call: lvalue callsuffix .

    $default  reduce using rule 44 (call)


State 82

   46 callsuffix: normcall .

    $default  reduce using rule 46 (callsuffix)


State 83

   47 callsuffix: methodcall .

    $default  reduce using rule 47 (callsuffix)


State 84

   29 assignexpr: member ASSIGN . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 114
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 85

   42 member: call LEFT_BRACKET . expr RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 115
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 86

   43 call: call LEFT_PARENTH . elist RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 52 (elist)

    expr        go to state 65
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 116
    objectdef   go to state 34
    const       go to state 37


State 87

   41 member: call DOT . ID

    ID  shift, and go to state 117


State 88

   83 ifstmt: ifstmt ELSE . $@10 stmt

    $default  reduce using rule 82 ($@10)

    $@10  go to state 118


State 89

   23 assignexpr: ID ASSIGN expr .

    $default  reduce using rule 23 (assignexpr)


State 90

   26 assignexpr: ID ASSIGN funcdef .

    $default  reduce using rule 26 (assignexpr)


State 91

   81 ifstmt: IF LEFT_PARENTH expr . RIGHT_PARENTH $@9 stmt

    RIGHT_PARENTH  shift, and go to state 119


State 92

   86 whilestmt: WHILE $@11 LEFT_PARENTH . expr RIGHT_PARENTH $@12 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 120
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 93

   89 forstmt: FOR $@13 LEFT_PARENTH . elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 52 (elist)

    expr        go to state 65
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 121
    objectdef   go to state 34
    const       go to state 37


State 94

   67 funcdef: FUNCTION ID $@5 . LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    LEFT_PARENTH  shift, and go to state 122


State 95

   70 funcdef: FUNCTION $@7 LEFT_PARENTH . $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    $default  reduce using rule 69 ($@8)

    $@8  go to state 123


State 96

   92 returnstmt: RETURN $@15 expr . SEMICOLON

    SEMICOLON  shift, and go to state 124


State 97

   24 assignexpr: LOCAL ID ASSIGN . expr
   27           | LOCAL ID ASSIGN . funcdef

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    FUNCTION      shift, and go to state 8
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 125
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 126
    const       go to state 37


State 98

   36 lvalue: LOCAL ID .

    $default  reduce using rule 36 (lvalue)


State 99

   45 call: LEFT_PARENTH funcdef . RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH

    RIGHT_PARENTH  shift, and go to state 127


State 100

   37 lvalue: DOUBLE_COLON ID .

    $default  reduce using rule 37 (lvalue)


State 101

   60 temp_stmt: temp_stmt . stmt
   64 block: LEFT_BRACE $@3 temp_stmt . $@4 RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 63 ($@4)

    stmt        go to state 128
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    $@4         go to state 129
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 102

   59 indexedelem: LEFT_BRACE $@1 . expr COLON $@2 expr RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 130
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 103

   53 objectdef: LEFT_BRACKET elist RIGHT_BRACKET .

    $default  reduce using rule 53 (objectdef)


State 104

   51 elist: elist COMMA . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 131
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 105

   54 objectdef: LEFT_BRACKET indexed RIGHT_BRACKET .

    $default  reduce using rule 54 (objectdef)


State 106

   56 indexed: indexed COMMA . indexedelem

    LEFT_BRACE  shift, and go to state 64

    indexedelem  go to state 132


State 107

   15 term: LEFT_PARENTH expr RIGHT_PARENTH .

    $default  reduce using rule 15 (term)


State 108

   33 primary: LEFT_PARENTH funcdef RIGHT_PARENTH .
   45 call: LEFT_PARENTH funcdef RIGHT_PARENTH . LEFT_PARENTH elist RIGHT_PARENTH

    LEFT_PARENTH  shift, and go to state 133

    $default  reduce using rule 33 (primary)


State 109

   25 assignexpr: DOUBLE_COLON ID ASSIGN . expr
   28           | DOUBLE_COLON ID ASSIGN . funcdef

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    FUNCTION      shift, and go to state 8
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 134
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 135
    const       go to state 37


State 110

   40 member: lvalue LEFT_BRACKET expr . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 136


State 111

   48 normcall: LEFT_PARENTH elist . RIGHT_PARENTH
   51 elist: elist . COMMA expr

    RIGHT_PARENTH  shift, and go to state 137
    COMMA          shift, and go to state 104


State 112

   39 member: lvalue DOT ID .

    $default  reduce using rule 39 (member)


State 113

   49 methodcall: DOT_DOT ID . LEFT_PARENTH elist RIGHT_PARENTH

    LEFT_PARENTH  shift, and go to state 138


State 114

   29 assignexpr: member ASSIGN expr .

    $default  reduce using rule 29 (assignexpr)


State 115

   42 member: call LEFT_BRACKET expr . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 139


State 116

   43 call: call LEFT_PARENTH elist . RIGHT_PARENTH
   51 elist: elist . COMMA expr

    RIGHT_PARENTH  shift, and go to state 140
    COMMA          shift, and go to state 104


State 117

   41 member: call DOT ID .

    $default  reduce using rule 41 (member)


State 118

   83 ifstmt: ifstmt ELSE $@10 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 141
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 119

   81 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH . $@9 stmt

    $default  reduce using rule 80 ($@9)

    $@9  go to state 142


State 120

   86 whilestmt: WHILE $@11 LEFT_PARENTH expr . RIGHT_PARENTH $@12 stmt

    RIGHT_PARENTH  shift, and go to state 143


State 121

   51 elist: elist . COMMA expr
   89 forstmt: FOR $@13 LEFT_PARENTH elist . SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

    SEMICOLON  shift, and go to state 144
    COMMA      shift, and go to state 104


State 122

   67 funcdef: FUNCTION ID $@5 LEFT_PARENTH . $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    $default  reduce using rule 66 ($@6)

    $@6  go to state 145


State 123

   70 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 . idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    ID  shift, and go to state 146

    $default  reduce using rule 79 (idlist)

    idlist  go to state 147


State 124

   92 returnstmt: RETURN $@15 expr SEMICOLON .

    $default  reduce using rule 92 (returnstmt)


State 125

   24 assignexpr: LOCAL ID ASSIGN expr .

    $default  reduce using rule 24 (assignexpr)


State 126

   27 assignexpr: LOCAL ID ASSIGN funcdef .

    $default  reduce using rule 27 (assignexpr)


State 127

   45 call: LEFT_PARENTH funcdef RIGHT_PARENTH . LEFT_PARENTH elist RIGHT_PARENTH

    LEFT_PARENTH  shift, and go to state 133


State 128

   60 temp_stmt: temp_stmt stmt .

    $default  reduce using rule 60 (temp_stmt)


State 129

   64 block: LEFT_BRACE $@3 temp_stmt $@4 . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 148


State 130

   59 indexedelem: LEFT_BRACE $@1 expr . COLON $@2 expr RIGHT_BRACE

    COLON  shift, and go to state 149


State 131

   51 elist: elist COMMA expr .

    $default  reduce using rule 51 (elist)


State 132

   56 indexed: indexed COMMA indexedelem .

    $default  reduce using rule 56 (indexed)


State 133

   45 call: LEFT_PARENTH funcdef RIGHT_PARENTH LEFT_PARENTH . elist RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 52 (elist)

    expr        go to state 65
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 150
    objectdef   go to state 34
    const       go to state 37


State 134

   25 assignexpr: DOUBLE_COLON ID ASSIGN expr .

    $default  reduce using rule 25 (assignexpr)


State 135

   28 assignexpr: DOUBLE_COLON ID ASSIGN funcdef .

    $default  reduce using rule 28 (assignexpr)


State 136

   40 member: lvalue LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 40 (member)


State 137

   48 normcall: LEFT_PARENTH elist RIGHT_PARENTH .

    $default  reduce using rule 48 (normcall)


State 138

   49 methodcall: DOT_DOT ID LEFT_PARENTH . elist RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 52 (elist)

    expr        go to state 65
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 151
    objectdef   go to state 34
    const       go to state 37


State 139

   42 member: call LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 42 (member)


State 140

   43 call: call LEFT_PARENTH elist RIGHT_PARENTH .

    $default  reduce using rule 43 (call)


State 141

   83 ifstmt: ifstmt ELSE $@10 stmt .

    $default  reduce using rule 83 (ifstmt)


State 142

   81 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH $@9 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 152
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 143

   86 whilestmt: WHILE $@11 LEFT_PARENTH expr RIGHT_PARENTH . $@12 stmt

    $default  reduce using rule 85 ($@12)

    $@12  go to state 153


State 144

   89 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON . expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 154
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 145

   67 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 . idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    ID  shift, and go to state 146

    $default  reduce using rule 79 (idlist)

    idlist  go to state 155


State 146

   77 idlist: ID .

    $default  reduce using rule 77 (idlist)


State 147

   70 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist . RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE
   78 idlist: idlist . COMMA ID

    RIGHT_PARENTH  shift, and go to state 156
    COMMA          shift, and go to state 157


State 148

   64 block: LEFT_BRACE $@3 temp_stmt $@4 RIGHT_BRACE .

    $default  reduce using rule 64 (block)


State 149

   59 indexedelem: LEFT_BRACE $@1 expr COLON . $@2 expr RIGHT_BRACE

    $default  reduce using rule 58 ($@2)

    $@2  go to state 158


State 150

   45 call: LEFT_PARENTH funcdef RIGHT_PARENTH LEFT_PARENTH elist . RIGHT_PARENTH
   51 elist: elist . COMMA expr

    RIGHT_PARENTH  shift, and go to state 159
    COMMA          shift, and go to state 104


State 151

   49 methodcall: DOT_DOT ID LEFT_PARENTH elist . RIGHT_PARENTH
   51 elist: elist . COMMA expr

    RIGHT_PARENTH  shift, and go to state 160
    COMMA          shift, and go to state 104


State 152

   81 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH $@9 stmt .

    $default  reduce using rule 81 (ifstmt)


State 153

   86 whilestmt: WHILE $@11 LEFT_PARENTH expr RIGHT_PARENTH $@12 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 161
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 154

   89 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr . SEMICOLON elist RIGHT_PARENTH $@14 stmt

    SEMICOLON  shift, and go to state 162


State 155

   67 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist . RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE
   78 idlist: idlist . COMMA ID

    RIGHT_PARENTH  shift, and go to state 163
    COMMA          shift, and go to state 157


State 156

   70 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH . LEFT_BRACE temp_stmt RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 164


State 157

   78 idlist: idlist COMMA . ID

    ID  shift, and go to state 165


State 158

   59 indexedelem: LEFT_BRACE $@1 expr COLON $@2 . expr RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 166
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 159

   45 call: LEFT_PARENTH funcdef RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH .

    $default  reduce using rule 45 (call)


State 160

   49 methodcall: DOT_DOT ID LEFT_PARENTH elist RIGHT_PARENTH .

    $default  reduce using rule 49 (methodcall)


State 161

   86 whilestmt: WHILE $@11 LEFT_PARENTH expr RIGHT_PARENTH $@12 stmt .

    $default  reduce using rule 86 (whilestmt)


State 162

   89 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON . elist RIGHT_PARENTH $@14 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 52 (elist)

    expr        go to state 65
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 167
    objectdef   go to state 34
    const       go to state 37


State 163

   67 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH . LEFT_BRACE temp_stmt RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 168


State 164

   70 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE . temp_stmt RIGHT_BRACE

    $default  reduce using rule 61 (temp_stmt)

    temp_stmt  go to state 169


State 165

   78 idlist: idlist COMMA ID .

    $default  reduce using rule 78 (idlist)


State 166

   59 indexedelem: LEFT_BRACE $@1 expr COLON $@2 expr . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 170


State 167

   51 elist: elist . COMMA expr
   89 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist . RIGHT_PARENTH $@14 stmt

    RIGHT_PARENTH  shift, and go to state 171
    COMMA          shift, and go to state 104


State 168

   67 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE . temp_stmt RIGHT_BRACE

    $default  reduce using rule 61 (temp_stmt)

    temp_stmt  go to state 172


State 169

   60 temp_stmt: temp_stmt . stmt
   70 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt . RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    RIGHT_BRACE   shift, and go to state 173
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 128
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 170

   59 indexedelem: LEFT_BRACE $@1 expr COLON $@2 expr RIGHT_BRACE .

    $default  reduce using rule 59 (indexedelem)


State 171

   89 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH . $@14 stmt

    $default  reduce using rule 88 ($@14)

    $@14  go to state 174


State 172

   60 temp_stmt: temp_stmt . stmt
   67 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt . RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    RIGHT_BRACE   shift, and go to state 175
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 128
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 173

   70 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE .

    $default  reduce using rule 70 (funcdef)


State 174

   89 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 176
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 175

   67 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE .

    $default  reduce using rule 67 (funcdef)


State 176

   89 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt .

    $default  reduce using rule 89 (forstmt)
