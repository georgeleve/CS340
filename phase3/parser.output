Terminals unused in grammar

    AND
    OR
    PLUS
    MUL
    DIV
    MODULO
    EQUAL
    NOT_EQUAL
    GREATER
    LESS
    GREATER_EQUAL
    LESS_EQUAL
    UMINUS


State 38 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | %empty

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | BREAK SEMICOLON
    9     | CONTINUE SEMICOLON
   10     | block
   11     | funcdef
   12     | SEMICOLON

   13 expr: assignexpr
   14     | term

   15 term: LEFT_PARENTH expr RIGHT_PARENTH
   16     | MINUS expr
   17     | NOT expr
   18     | PLUS_PLUS lvalue
   19     | lvalue PLUS_PLUS
   20     | MINUS_MINUS lvalue
   21     | lvalue MINUS_MINUS
   22     | primary

   23 assignexpr: lvalue ASSIGN expr
   24           | lvalue ASSIGN funcdef

   25 primary: lvalue
   26        | call
   27        | objectdef
   28        | LEFT_PARENTH funcdef RIGHT_PARENTH
   29        | const

   30 lvalue: ID
   31       | LOCAL ID
   32       | DOUBLE_COLON ID
   33       | member

   34 member: lvalue DOT ID
   35       | lvalue LEFT_BRACKET expr RIGHT_BRACKET
   36       | call DOT ID
   37       | call LEFT_BRACKET expr RIGHT_BRACKET

   38 call: call LEFT_PARENTH elist RIGHT_PARENTH
   39     | lvalue callsuffix
   40     | LEFT_PARENTH funcdef RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH

   41 callsuffix: normcall
   42           | methodcall

   43 normcall: LEFT_PARENTH elist RIGHT_PARENTH

   44 methodcall: DOT_DOT ID LEFT_PARENTH elist RIGHT_PARENTH

   45 elist: expr
   46      | elist COMMA expr
   47      | %empty

   48 objectdef: LEFT_BRACKET elist RIGHT_BRACKET
   49          | LEFT_BRACKET indexed RIGHT_BRACKET

   50 indexed: indexedelem
   51        | indexed COMMA indexedelem

   52 $@1: %empty

   53 $@2: %empty

   54 indexedelem: LEFT_BRACE $@1 expr COLON $@2 expr RIGHT_BRACE

   55 temp_stmt: temp_stmt stmt
   56          | %empty

   57 $@3: %empty

   58 $@4: %empty

   59 block: LEFT_BRACE $@3 temp_stmt $@4 RIGHT_BRACE

   60 $@5: %empty

   61 $@6: %empty

   62 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

   63 $@7: %empty

   64 $@8: %empty

   65 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

   66 const: INTEGER
   67      | FLOAT
   68      | STRING
   69      | NIL
   70      | TRUE
   71      | FALSE

   72 idlist: ID
   73       | idlist COMMA ID
   74       | %empty

   75 $@9: %empty

   76 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH $@9 stmt

   77 $@10: %empty

   78 ifstmt: ifstmt ELSE $@10 stmt

   79 $@11: %empty

   80 $@12: %empty

   81 whilestmt: WHILE $@11 LEFT_PARENTH expr RIGHT_PARENTH $@12 stmt

   82 $@13: %empty

   83 $@14: %empty

   84 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

   85 returnstmt: RETURN SEMICOLON

   86 $@15: %empty

   87 returnstmt: RETURN $@15 expr SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <stringval> (258) 30 31 32 34 36 44 62 72 73
    STRING <stringval> (259) 68
    INTEGER <intval> (260) 66
    FLOAT <floatval> (261) 67
    IF <stringval> (262) 76
    ELSE <stringval> (263) 78
    WHILE <stringval> (264) 81
    FOR <stringval> (265) 84
    FUNCTION <stringval> (266) 62 65
    RETURN <stringval> (267) 85 87
    BREAK <stringval> (268) 8
    CONTINUE <stringval> (269) 9
    AND <stringval> (270)
    NOT <stringval> (271) 17
    OR <stringval> (272)
    LOCAL <stringval> (273) 31
    TRUE <stringval> (274) 70
    FALSE <stringval> (275) 71
    NIL <stringval> (276) 69
    ASSIGN <stringval> (277) 23 24
    PLUS <stringval> (278)
    MINUS <stringval> (279) 16
    MUL <stringval> (280)
    DIV <stringval> (281)
    MODULO <stringval> (282)
    EQUAL <stringval> (283)
    NOT_EQUAL <stringval> (284)
    PLUS_PLUS <stringval> (285) 18 19
    MINUS_MINUS <stringval> (286) 20 21
    GREATER <stringval> (287)
    LESS <stringval> (288)
    GREATER_EQUAL <stringval> (289)
    LESS_EQUAL <stringval> (290)
    LEFT_BRACE <stringval> (291) 54 59 62 65
    RIGHT_BRACE <stringval> (292) 54 59 62 65
    LEFT_BRACKET <stringval> (293) 35 37 48 49
    RIGHT_BRACKET <stringval> (294) 35 37 48 49
    LEFT_PARENTH <stringval> (295) 15 28 38 40 43 44 62 65 76 81 84
    RIGHT_PARENTH <stringval> (296) 15 28 38 40 43 44 62 65 76 81 84
    SEMICOLON <stringval> (297) 3 8 9 12 84 85 87
    COMMA <stringval> (298) 46 51 73
    COLON <stringval> (299) 54
    DOUBLE_COLON <stringval> (300) 32
    DOT <stringval> (301) 34 36
    DOT_DOT <stringval> (302) 44
    UMINUS (303)


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1 2
        on right: 0 1
    stmt <exprval> (51)
        on left: 3 4 5 6 7 8 9 10 11 12
        on right: 1 55 76 78 81 84
    expr <exprval> (52)
        on left: 13 14
        on right: 3 15 16 17 23 35 37 45 46 54 76 81 84 87
    term <exprval> (53)
        on left: 15 16 17 18 19 20 21 22
        on right: 14
    assignexpr <exprval> (54)
        on left: 23 24
        on right: 13
    primary <exprval> (55)
        on left: 25 26 27 28 29
        on right: 22
    lvalue <exprval> (56)
        on left: 30 31 32 33
        on right: 18 19 20 21 23 24 25 34 35 39
    member <exprval> (57)
        on left: 34 35 36 37
        on right: 33
    call <exprval> (58)
        on left: 38 39 40
        on right: 26 36 37 38
    callsuffix <stringval> (59)
        on left: 41 42
        on right: 39
    normcall <stringval> (60)
        on left: 43
        on right: 41
    methodcall <stringval> (61)
        on left: 44
        on right: 42
    elist <exprval> (62)
        on left: 45 46 47
        on right: 38 40 43 44 46 48 84
    objectdef <exprval> (63)
        on left: 48 49
        on right: 27
    indexed <exprval> (64)
        on left: 50 51
        on right: 49 51
    indexedelem <exprval> (65)
        on left: 54
        on right: 50 51
    $@1 (66)
        on left: 52
        on right: 54
    $@2 (67)
        on left: 53
        on right: 54
    temp_stmt <stringval> (68)
        on left: 55 56
        on right: 55 59 62 65
    block <stringval> (69)
        on left: 59
        on right: 10
    $@3 (70)
        on left: 57
        on right: 59
    $@4 (71)
        on left: 58
        on right: 59
    funcdef <stringval> (72)
        on left: 62 65
        on right: 11 24 28 40
    $@5 (73)
        on left: 60
        on right: 62
    $@6 (74)
        on left: 61
        on right: 62
    $@7 (75)
        on left: 63
        on right: 65
    $@8 (76)
        on left: 64
        on right: 65
    const <exprval> (77)
        on left: 66 67 68 69 70 71
        on right: 29
    idlist (78)
        on left: 72 73 74
        on right: 62 65 73
    ifstmt <stringval> (79)
        on left: 76 78
        on right: 4 78
    $@9 (80)
        on left: 75
        on right: 76
    $@10 (81)
        on left: 77
        on right: 78
    whilestmt <stringval> (82)
        on left: 81
        on right: 5
    $@11 (83)
        on left: 79
        on right: 81
    $@12 (84)
        on left: 80
        on right: 81
    forstmt <stringval> (85)
        on left: 84
        on right: 6
    $@13 (86)
        on left: 82
        on right: 84
    $@14 (87)
        on left: 83
        on right: 84
    returnstmt <exprval> (88)
        on left: 85 87
        on right: 7
    $@15 (89)
        on left: 86
        on right: 87


State 0

    0 $accept: . program $end

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 1

   30 lvalue: ID .

    $default  reduce using rule 30 (lvalue)


State 2

   68 const: STRING .

    $default  reduce using rule 68 (const)


State 3

   66 const: INTEGER .

    $default  reduce using rule 66 (const)


State 4

   67 const: FLOAT .

    $default  reduce using rule 67 (const)


State 5

   76 ifstmt: IF . LEFT_PARENTH expr RIGHT_PARENTH $@9 stmt

    LEFT_PARENTH  shift, and go to state 42


State 6

   81 whilestmt: WHILE . $@11 LEFT_PARENTH expr RIGHT_PARENTH $@12 stmt

    $default  reduce using rule 79 ($@11)

    $@11  go to state 43


State 7

   84 forstmt: FOR . $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

    $default  reduce using rule 82 ($@13)

    $@13  go to state 44


State 8

   62 funcdef: FUNCTION . ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE
   65        | FUNCTION . $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    ID  shift, and go to state 45

    $default  reduce using rule 63 ($@7)

    $@7  go to state 46


State 9

   85 returnstmt: RETURN . SEMICOLON
   87           | RETURN . $@15 expr SEMICOLON

    SEMICOLON  shift, and go to state 47

    $default  reduce using rule 86 ($@15)

    $@15  go to state 48


State 10

    8 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 49


State 11

    9 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 50


State 12

   17 term: NOT . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 51
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 13

   31 lvalue: LOCAL . ID

    ID  shift, and go to state 52


State 14

   70 const: TRUE .

    $default  reduce using rule 70 (const)


State 15

   71 const: FALSE .

    $default  reduce using rule 71 (const)


State 16

   69 const: NIL .

    $default  reduce using rule 69 (const)


State 17

   16 term: MINUS . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 18

   18 term: PLUS_PLUS . lvalue

    ID            shift, and go to state 1
    LOCAL         shift, and go to state 13
    LEFT_PARENTH  shift, and go to state 54
    DOUBLE_COLON  shift, and go to state 24

    lvalue  go to state 55
    member  go to state 32
    call    go to state 56


State 19

   20 term: MINUS_MINUS . lvalue

    ID            shift, and go to state 1
    LOCAL         shift, and go to state 13
    LEFT_PARENTH  shift, and go to state 54
    DOUBLE_COLON  shift, and go to state 24

    lvalue  go to state 57
    member  go to state 32
    call    go to state 56


State 20

   59 block: LEFT_BRACE . $@3 temp_stmt $@4 RIGHT_BRACE

    $default  reduce using rule 57 ($@3)

    $@3  go to state 58


State 21

   48 objectdef: LEFT_BRACKET . elist RIGHT_BRACKET
   49          | LEFT_BRACKET . indexed RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 59
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 47 (elist)

    expr         go to state 60
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 61
    objectdef    go to state 34
    indexed      go to state 62
    indexedelem  go to state 63
    const        go to state 37


State 22

   15 term: LEFT_PARENTH . expr RIGHT_PARENTH
   28 primary: LEFT_PARENTH . funcdef RIGHT_PARENTH
   40 call: LEFT_PARENTH . funcdef RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    FUNCTION      shift, and go to state 8
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 64
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 65
    const       go to state 37


State 23

   12 stmt: SEMICOLON .

    $default  reduce using rule 12 (stmt)


State 24

   32 lvalue: DOUBLE_COLON . ID

    ID  shift, and go to state 66


State 25

    0 $accept: program . $end

    $end  shift, and go to state 67


State 26

    1 program: stmt . program

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 68
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 27

    3 stmt: expr . SEMICOLON

    SEMICOLON  shift, and go to state 69


State 28

   14 expr: term .

    $default  reduce using rule 14 (expr)


State 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


State 30

   22 term: primary .

    $default  reduce using rule 22 (term)


State 31

   19 term: lvalue . PLUS_PLUS
   21     | lvalue . MINUS_MINUS
   23 assignexpr: lvalue . ASSIGN expr
   24           | lvalue . ASSIGN funcdef
   25 primary: lvalue .
   34 member: lvalue . DOT ID
   35       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   39 call: lvalue . callsuffix

    ASSIGN        shift, and go to state 70
    PLUS_PLUS     shift, and go to state 71
    MINUS_MINUS   shift, and go to state 72
    LEFT_BRACKET  shift, and go to state 73
    LEFT_PARENTH  shift, and go to state 74
    DOT           shift, and go to state 75
    DOT_DOT       shift, and go to state 76

    $default  reduce using rule 25 (primary)

    callsuffix  go to state 77
    normcall    go to state 78
    methodcall  go to state 79


State 32

   33 lvalue: member .

    $default  reduce using rule 33 (lvalue)


State 33

   26 primary: call .
   36 member: call . DOT ID
   37       | call . LEFT_BRACKET expr RIGHT_BRACKET
   38 call: call . LEFT_PARENTH elist RIGHT_PARENTH

    LEFT_BRACKET  shift, and go to state 80
    LEFT_PARENTH  shift, and go to state 81
    DOT           shift, and go to state 82

    $default  reduce using rule 26 (primary)


State 34

   27 primary: objectdef .

    $default  reduce using rule 27 (primary)


State 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


State 36

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


State 37

   29 primary: const .

    $default  reduce using rule 29 (primary)


State 38

    4 stmt: ifstmt .
   78 ifstmt: ifstmt . ELSE $@10 stmt

    ELSE  shift, and go to state 83

    ELSE      [reduce using rule 4 (stmt)]
    $default  reduce using rule 4 (stmt)


State 39

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 42

   76 ifstmt: IF LEFT_PARENTH . expr RIGHT_PARENTH $@9 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 84
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 43

   81 whilestmt: WHILE $@11 . LEFT_PARENTH expr RIGHT_PARENTH $@12 stmt

    LEFT_PARENTH  shift, and go to state 85


State 44

   84 forstmt: FOR $@13 . LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

    LEFT_PARENTH  shift, and go to state 86


State 45

   62 funcdef: FUNCTION ID . $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    $default  reduce using rule 60 ($@5)

    $@5  go to state 87


State 46

   65 funcdef: FUNCTION $@7 . LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    LEFT_PARENTH  shift, and go to state 88


State 47

   85 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 85 (returnstmt)


State 48

   87 returnstmt: RETURN $@15 . expr SEMICOLON

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 89
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 49

    8 stmt: BREAK SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 50

    9 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 51

   17 term: NOT expr .

    $default  reduce using rule 17 (term)


State 52

   31 lvalue: LOCAL ID .

    $default  reduce using rule 31 (lvalue)


State 53

   16 term: MINUS expr .

    $default  reduce using rule 16 (term)


State 54

   40 call: LEFT_PARENTH . funcdef RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH

    FUNCTION  shift, and go to state 8

    funcdef  go to state 90


State 55

   18 term: PLUS_PLUS lvalue .
   34 member: lvalue . DOT ID
   35       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   39 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 73
    LEFT_PARENTH  shift, and go to state 74
    DOT           shift, and go to state 75
    DOT_DOT       shift, and go to state 76

    $default  reduce using rule 18 (term)

    callsuffix  go to state 77
    normcall    go to state 78
    methodcall  go to state 79


State 56

   36 member: call . DOT ID
   37       | call . LEFT_BRACKET expr RIGHT_BRACKET
   38 call: call . LEFT_PARENTH elist RIGHT_PARENTH

    LEFT_BRACKET  shift, and go to state 80
    LEFT_PARENTH  shift, and go to state 81
    DOT           shift, and go to state 82


State 57

   20 term: MINUS_MINUS lvalue .
   34 member: lvalue . DOT ID
   35       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   39 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 73
    LEFT_PARENTH  shift, and go to state 74
    DOT           shift, and go to state 75
    DOT_DOT       shift, and go to state 76

    $default  reduce using rule 20 (term)

    callsuffix  go to state 77
    normcall    go to state 78
    methodcall  go to state 79


State 58

   59 block: LEFT_BRACE $@3 . temp_stmt $@4 RIGHT_BRACE

    $default  reduce using rule 56 (temp_stmt)

    temp_stmt  go to state 91


State 59

   54 indexedelem: LEFT_BRACE . $@1 expr COLON $@2 expr RIGHT_BRACE

    $default  reduce using rule 52 ($@1)

    $@1  go to state 92


State 60

   45 elist: expr .

    $default  reduce using rule 45 (elist)


State 61

   46 elist: elist . COMMA expr
   48 objectdef: LEFT_BRACKET elist . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 93
    COMMA          shift, and go to state 94


State 62

   49 objectdef: LEFT_BRACKET indexed . RIGHT_BRACKET
   51 indexed: indexed . COMMA indexedelem

    RIGHT_BRACKET  shift, and go to state 95
    COMMA          shift, and go to state 96


State 63

   50 indexed: indexedelem .

    $default  reduce using rule 50 (indexed)


State 64

   15 term: LEFT_PARENTH expr . RIGHT_PARENTH

    RIGHT_PARENTH  shift, and go to state 97


State 65

   28 primary: LEFT_PARENTH funcdef . RIGHT_PARENTH
   40 call: LEFT_PARENTH funcdef . RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH

    RIGHT_PARENTH  shift, and go to state 98


State 66

   32 lvalue: DOUBLE_COLON ID .

    $default  reduce using rule 32 (lvalue)


State 67

    0 $accept: program $end .

    $default  accept


State 68

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 69

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


State 70

   23 assignexpr: lvalue ASSIGN . expr
   24           | lvalue ASSIGN . funcdef

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    FUNCTION      shift, and go to state 8
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 99
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 100
    const       go to state 37


State 71

   19 term: lvalue PLUS_PLUS .

    $default  reduce using rule 19 (term)


State 72

   21 term: lvalue MINUS_MINUS .

    $default  reduce using rule 21 (term)


State 73

   35 member: lvalue LEFT_BRACKET . expr RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 101
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 74

   43 normcall: LEFT_PARENTH . elist RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 47 (elist)

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 102
    objectdef   go to state 34
    const       go to state 37


State 75

   34 member: lvalue DOT . ID

    ID  shift, and go to state 103


State 76

   44 methodcall: DOT_DOT . ID LEFT_PARENTH elist RIGHT_PARENTH

    ID  shift, and go to state 104


State 77

   39 call: lvalue callsuffix .

    $default  reduce using rule 39 (call)


State 78

   41 callsuffix: normcall .

    $default  reduce using rule 41 (callsuffix)


State 79

   42 callsuffix: methodcall .

    $default  reduce using rule 42 (callsuffix)


State 80

   37 member: call LEFT_BRACKET . expr RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 105
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 81

   38 call: call LEFT_PARENTH . elist RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 47 (elist)

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 106
    objectdef   go to state 34
    const       go to state 37


State 82

   36 member: call DOT . ID

    ID  shift, and go to state 107


State 83

   78 ifstmt: ifstmt ELSE . $@10 stmt

    $default  reduce using rule 77 ($@10)

    $@10  go to state 108


State 84

   76 ifstmt: IF LEFT_PARENTH expr . RIGHT_PARENTH $@9 stmt

    RIGHT_PARENTH  shift, and go to state 109


State 85

   81 whilestmt: WHILE $@11 LEFT_PARENTH . expr RIGHT_PARENTH $@12 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 110
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 86

   84 forstmt: FOR $@13 LEFT_PARENTH . elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 47 (elist)

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 111
    objectdef   go to state 34
    const       go to state 37


State 87

   62 funcdef: FUNCTION ID $@5 . LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    LEFT_PARENTH  shift, and go to state 112


State 88

   65 funcdef: FUNCTION $@7 LEFT_PARENTH . $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    $default  reduce using rule 64 ($@8)

    $@8  go to state 113


State 89

   87 returnstmt: RETURN $@15 expr . SEMICOLON

    SEMICOLON  shift, and go to state 114


State 90

   40 call: LEFT_PARENTH funcdef . RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH

    RIGHT_PARENTH  shift, and go to state 115


State 91

   55 temp_stmt: temp_stmt . stmt
   59 block: LEFT_BRACE $@3 temp_stmt . $@4 RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 58 ($@4)

    stmt        go to state 116
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    $@4         go to state 117
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 92

   54 indexedelem: LEFT_BRACE $@1 . expr COLON $@2 expr RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 118
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 93

   48 objectdef: LEFT_BRACKET elist RIGHT_BRACKET .

    $default  reduce using rule 48 (objectdef)


State 94

   46 elist: elist COMMA . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 119
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 95

   49 objectdef: LEFT_BRACKET indexed RIGHT_BRACKET .

    $default  reduce using rule 49 (objectdef)


State 96

   51 indexed: indexed COMMA . indexedelem

    LEFT_BRACE  shift, and go to state 59

    indexedelem  go to state 120


State 97

   15 term: LEFT_PARENTH expr RIGHT_PARENTH .

    $default  reduce using rule 15 (term)


State 98

   28 primary: LEFT_PARENTH funcdef RIGHT_PARENTH .
   40 call: LEFT_PARENTH funcdef RIGHT_PARENTH . LEFT_PARENTH elist RIGHT_PARENTH

    LEFT_PARENTH  shift, and go to state 121

    $default  reduce using rule 28 (primary)


State 99

   23 assignexpr: lvalue ASSIGN expr .

    $default  reduce using rule 23 (assignexpr)


State 100

   24 assignexpr: lvalue ASSIGN funcdef .

    $default  reduce using rule 24 (assignexpr)


State 101

   35 member: lvalue LEFT_BRACKET expr . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 122


State 102

   43 normcall: LEFT_PARENTH elist . RIGHT_PARENTH
   46 elist: elist . COMMA expr

    RIGHT_PARENTH  shift, and go to state 123
    COMMA          shift, and go to state 94


State 103

   34 member: lvalue DOT ID .

    $default  reduce using rule 34 (member)


State 104

   44 methodcall: DOT_DOT ID . LEFT_PARENTH elist RIGHT_PARENTH

    LEFT_PARENTH  shift, and go to state 124


State 105

   37 member: call LEFT_BRACKET expr . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 125


State 106

   38 call: call LEFT_PARENTH elist . RIGHT_PARENTH
   46 elist: elist . COMMA expr

    RIGHT_PARENTH  shift, and go to state 126
    COMMA          shift, and go to state 94


State 107

   36 member: call DOT ID .

    $default  reduce using rule 36 (member)


State 108

   78 ifstmt: ifstmt ELSE $@10 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 127
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 109

   76 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH . $@9 stmt

    $default  reduce using rule 75 ($@9)

    $@9  go to state 128


State 110

   81 whilestmt: WHILE $@11 LEFT_PARENTH expr . RIGHT_PARENTH $@12 stmt

    RIGHT_PARENTH  shift, and go to state 129


State 111

   46 elist: elist . COMMA expr
   84 forstmt: FOR $@13 LEFT_PARENTH elist . SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

    SEMICOLON  shift, and go to state 130
    COMMA      shift, and go to state 94


State 112

   62 funcdef: FUNCTION ID $@5 LEFT_PARENTH . $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    $default  reduce using rule 61 ($@6)

    $@6  go to state 131


State 113

   65 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 . idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    ID  shift, and go to state 132

    $default  reduce using rule 74 (idlist)

    idlist  go to state 133


State 114

   87 returnstmt: RETURN $@15 expr SEMICOLON .

    $default  reduce using rule 87 (returnstmt)


State 115

   40 call: LEFT_PARENTH funcdef RIGHT_PARENTH . LEFT_PARENTH elist RIGHT_PARENTH

    LEFT_PARENTH  shift, and go to state 121


State 116

   55 temp_stmt: temp_stmt stmt .

    $default  reduce using rule 55 (temp_stmt)


State 117

   59 block: LEFT_BRACE $@3 temp_stmt $@4 . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 134


State 118

   54 indexedelem: LEFT_BRACE $@1 expr . COLON $@2 expr RIGHT_BRACE

    COLON  shift, and go to state 135


State 119

   46 elist: elist COMMA expr .

    $default  reduce using rule 46 (elist)


State 120

   51 indexed: indexed COMMA indexedelem .

    $default  reduce using rule 51 (indexed)


State 121

   40 call: LEFT_PARENTH funcdef RIGHT_PARENTH LEFT_PARENTH . elist RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 47 (elist)

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 136
    objectdef   go to state 34
    const       go to state 37


State 122

   35 member: lvalue LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 35 (member)


State 123

   43 normcall: LEFT_PARENTH elist RIGHT_PARENTH .

    $default  reduce using rule 43 (normcall)


State 124

   44 methodcall: DOT_DOT ID LEFT_PARENTH . elist RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 47 (elist)

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 137
    objectdef   go to state 34
    const       go to state 37


State 125

   37 member: call LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 37 (member)


State 126

   38 call: call LEFT_PARENTH elist RIGHT_PARENTH .

    $default  reduce using rule 38 (call)


State 127

   78 ifstmt: ifstmt ELSE $@10 stmt .

    $default  reduce using rule 78 (ifstmt)


State 128

   76 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH $@9 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 138
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 129

   81 whilestmt: WHILE $@11 LEFT_PARENTH expr RIGHT_PARENTH . $@12 stmt

    $default  reduce using rule 80 ($@12)

    $@12  go to state 139


State 130

   84 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON . expr SEMICOLON elist RIGHT_PARENTH $@14 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 140
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 131

   62 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 . idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE

    ID  shift, and go to state 132

    $default  reduce using rule 74 (idlist)

    idlist  go to state 141


State 132

   72 idlist: ID .

    $default  reduce using rule 72 (idlist)


State 133

   65 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist . RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE
   73 idlist: idlist . COMMA ID

    RIGHT_PARENTH  shift, and go to state 142
    COMMA          shift, and go to state 143


State 134

   59 block: LEFT_BRACE $@3 temp_stmt $@4 RIGHT_BRACE .

    $default  reduce using rule 59 (block)


State 135

   54 indexedelem: LEFT_BRACE $@1 expr COLON . $@2 expr RIGHT_BRACE

    $default  reduce using rule 53 ($@2)

    $@2  go to state 144


State 136

   40 call: LEFT_PARENTH funcdef RIGHT_PARENTH LEFT_PARENTH elist . RIGHT_PARENTH
   46 elist: elist . COMMA expr

    RIGHT_PARENTH  shift, and go to state 145
    COMMA          shift, and go to state 94


State 137

   44 methodcall: DOT_DOT ID LEFT_PARENTH elist . RIGHT_PARENTH
   46 elist: elist . COMMA expr

    RIGHT_PARENTH  shift, and go to state 146
    COMMA          shift, and go to state 94


State 138

   76 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH $@9 stmt .

    $default  reduce using rule 76 (ifstmt)


State 139

   81 whilestmt: WHILE $@11 LEFT_PARENTH expr RIGHT_PARENTH $@12 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 147
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 140

   84 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr . SEMICOLON elist RIGHT_PARENTH $@14 stmt

    SEMICOLON  shift, and go to state 148


State 141

   62 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist . RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE
   73 idlist: idlist . COMMA ID

    RIGHT_PARENTH  shift, and go to state 149
    COMMA          shift, and go to state 143


State 142

   65 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH . LEFT_BRACE temp_stmt RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 150


State 143

   73 idlist: idlist COMMA . ID

    ID  shift, and go to state 151


State 144

   54 indexedelem: LEFT_BRACE $@1 expr COLON $@2 . expr RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 152
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 145

   40 call: LEFT_PARENTH funcdef RIGHT_PARENTH LEFT_PARENTH elist RIGHT_PARENTH .

    $default  reduce using rule 40 (call)


State 146

   44 methodcall: DOT_DOT ID LEFT_PARENTH elist RIGHT_PARENTH .

    $default  reduce using rule 44 (methodcall)


State 147

   81 whilestmt: WHILE $@11 LEFT_PARENTH expr RIGHT_PARENTH $@12 stmt .

    $default  reduce using rule 81 (whilestmt)


State 148

   84 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON . elist RIGHT_PARENTH $@14 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 47 (elist)

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 153
    objectdef   go to state 34
    const       go to state 37


State 149

   62 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH . LEFT_BRACE temp_stmt RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 154


State 150

   65 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE . temp_stmt RIGHT_BRACE

    $default  reduce using rule 56 (temp_stmt)

    temp_stmt  go to state 155


State 151

   73 idlist: idlist COMMA ID .

    $default  reduce using rule 73 (idlist)


State 152

   54 indexedelem: LEFT_BRACE $@1 expr COLON $@2 expr . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 156


State 153

   46 elist: elist . COMMA expr
   84 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist . RIGHT_PARENTH $@14 stmt

    RIGHT_PARENTH  shift, and go to state 157
    COMMA          shift, and go to state 94


State 154

   62 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE . temp_stmt RIGHT_BRACE

    $default  reduce using rule 56 (temp_stmt)

    temp_stmt  go to state 158


State 155

   55 temp_stmt: temp_stmt . stmt
   65 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt . RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    RIGHT_BRACE   shift, and go to state 159
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 116
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 156

   54 indexedelem: LEFT_BRACE $@1 expr COLON $@2 expr RIGHT_BRACE .

    $default  reduce using rule 54 (indexedelem)


State 157

   84 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH . $@14 stmt

    $default  reduce using rule 83 ($@14)

    $@14  go to state 160


State 158

   55 temp_stmt: temp_stmt . stmt
   62 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt . RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    RIGHT_BRACE   shift, and go to state 161
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 116
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 159

   65 funcdef: FUNCTION $@7 LEFT_PARENTH $@8 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE .

    $default  reduce using rule 65 (funcdef)


State 160

   84 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 162
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 161

   62 funcdef: FUNCTION ID $@5 LEFT_PARENTH $@6 idlist RIGHT_PARENTH LEFT_BRACE temp_stmt RIGHT_BRACE .

    $default  reduce using rule 62 (funcdef)


State 162

   84 forstmt: FOR $@13 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@14 stmt .

    $default  reduce using rule 84 (forstmt)
