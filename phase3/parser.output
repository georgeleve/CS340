Terminals unused in grammar

    UMINUS


State 39 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | %empty

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | BREAK SEMICOLON
    9     | CONTINUE SEMICOLON
   10     | block
   11     | funcdef
   12     | SEMICOLON

   13 expr: assignexpr
   14     | expr PLUS expr
   15     | expr MINUS expr
   16     | expr MUL expr
   17     | expr DIV expr
   18     | expr MODULO expr
   19     | expr GREATER expr
   20     | expr GREATER_EQUAL expr
   21     | expr LESS expr
   22     | expr LESS_EQUAL expr
   23     | expr EQUAL expr
   24     | expr NOT_EQUAL expr
   25     | expr AND expr
   26     | expr OR expr
   27     | term

   28 term: LEFT_PARENTH expr RIGHT_PARENTH
   29     | MINUS expr
   30     | NOT expr
   31     | PLUS_PLUS lvalue
   32     | lvalue PLUS_PLUS
   33     | MINUS_MINUS lvalue
   34     | lvalue MINUS_MINUS
   35     | primary

   36 assignexpr: lvalue ASSIGN expr
   37           | lvalue ASSIGN funcdef

   38 primary: lvalue
   39        | call
   40        | objectdef
   41        | LEFT_PARENTH funcdef RIGHT_PARENTH
   42        | const

   43 lvalue: ID
   44       | LOCAL ID
   45       | DOUBLE_COLON ID
   46       | member

   47 member: lvalue DOT ID
   48       | lvalue LEFT_BRACKET expr RIGHT_BRACKET
   49       | call DOT ID
   50       | call LEFT_BRACKET expr RIGHT_BRACKET

   51 @1: %empty

   52 call: call @1 normcall

   53 @2: %empty

   54 call: lvalue @2 callsuffix

   55 @3: %empty

   56 call: LEFT_PARENTH funcdef RIGHT_PARENTH @3 normcall

   57 callsuffix: normcall
   58           | methodcall

   59 $@4: %empty

   60 $@5: %empty

   61 normcall: LEFT_PARENTH $@4 elist $@5 RIGHT_PARENTH

   62 $@6: %empty

   63 $@7: %empty

   64 methodcall: DOT_DOT ID LEFT_PARENTH $@6 elist $@7 RIGHT_PARENTH

   65 elist: expr
   66      | elist COMMA expr
   67      | %empty

   68 objectdef: LEFT_BRACKET elist RIGHT_BRACKET
   69          | LEFT_BRACKET indexed RIGHT_BRACKET

   70 indexed: indexedelem
   71        | indexed COMMA indexedelem

   72 $@8: %empty

   73 $@9: %empty

   74 indexedelem: LEFT_BRACE $@8 expr COLON $@9 expr RIGHT_BRACE

   75 temp_stmt: temp_stmt stmt
   76          | %empty

   77 $@10: %empty

   78 $@11: %empty

   79 block: LEFT_BRACE $@10 temp_stmt $@11 RIGHT_BRACE

   80 $@12: %empty

   81 $@13: %empty

   82 $@14: %empty

   83 funcdef: funcprefix $@12 LEFT_PARENTH $@13 idlist RIGHT_PARENTH LEFT_BRACE $@14 temp_stmt RIGHT_BRACE

   84 funcprefix: FUNCTION ID
   85           | FUNCTION

   86 const: INTEGER
   87      | FLOAT
   88      | STRING
   89      | NIL
   90      | TRUE
   91      | FALSE

   92 idlist: ID
   93       | idlist COMMA ID
   94       | %empty

   95 $@15: %empty

   96 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH $@15 stmt

   97 $@16: %empty

   98 ifstmt: ifstmt ELSE $@16 stmt

   99 $@17: %empty

  100 $@18: %empty

  101 whilestmt: WHILE $@17 LEFT_PARENTH expr RIGHT_PARENTH $@18 stmt

  102 $@19: %empty

  103 $@20: %empty

  104 forstmt: FOR $@19 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@20 stmt

  105 returnstmt: RETURN SEMICOLON

  106 $@21: %empty

  107 returnstmt: RETURN $@21 expr SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <stringval> (258) 43 44 45 47 49 64 84 92 93
    STRING <stringval> (259) 88
    INTEGER <intval> (260) 86
    FLOAT <floatval> (261) 87
    IF <stringval> (262) 96
    ELSE <stringval> (263) 98
    WHILE <stringval> (264) 101
    FOR <stringval> (265) 104
    FUNCTION <stringval> (266) 84 85
    RETURN <stringval> (267) 105 107
    BREAK <stringval> (268) 8
    CONTINUE <stringval> (269) 9
    AND <stringval> (270) 25
    NOT <stringval> (271) 30
    OR <stringval> (272) 26
    LOCAL <stringval> (273) 44
    TRUE <stringval> (274) 90
    FALSE <stringval> (275) 91
    NIL <stringval> (276) 89
    ASSIGN <stringval> (277) 36 37
    PLUS <stringval> (278) 14
    MINUS <stringval> (279) 15 29
    MUL <stringval> (280) 16
    DIV <stringval> (281) 17
    MODULO <stringval> (282) 18
    EQUAL <stringval> (283) 23
    NOT_EQUAL <stringval> (284) 24
    PLUS_PLUS <stringval> (285) 31 32
    MINUS_MINUS <stringval> (286) 33 34
    GREATER <stringval> (287) 19
    LESS <stringval> (288) 21
    GREATER_EQUAL <stringval> (289) 20
    LESS_EQUAL <stringval> (290) 22
    LEFT_BRACE <stringval> (291) 74 79 83
    RIGHT_BRACE <stringval> (292) 74 79 83
    LEFT_BRACKET <stringval> (293) 48 50 68 69
    RIGHT_BRACKET <stringval> (294) 48 50 68 69
    LEFT_PARENTH <stringval> (295) 28 41 56 61 64 83 96 101 104
    RIGHT_PARENTH <stringval> (296) 28 41 56 61 64 83 96 101 104
    SEMICOLON <stringval> (297) 3 8 9 12 104 105 107
    COMMA <stringval> (298) 66 71 93
    COLON <stringval> (299) 74
    DOUBLE_COLON <stringval> (300) 45
    DOT <stringval> (301) 47 49
    DOT_DOT <stringval> (302) 64
    UMINUS (303)


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1 2
        on right: 0 1
    stmt <exprval> (51)
        on left: 3 4 5 6 7 8 9 10 11 12
        on right: 1 75 96 98 101 104
    expr <exprval> (52)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 3 14 15 16 17 18 19 20 21 22 23 24 25 26 28 29 30 36 48 50 65 66 74 96 101 104 107
    term <exprval> (53)
        on left: 28 29 30 31 32 33 34 35
        on right: 27
    assignexpr <exprval> (54)
        on left: 36 37
        on right: 13
    primary <exprval> (55)
        on left: 38 39 40 41 42
        on right: 35
    lvalue <exprval> (56)
        on left: 43 44 45 46
        on right: 31 32 33 34 36 37 38 47 48 54
    member <exprval> (57)
        on left: 47 48 49 50
        on right: 46
    call <exprval> (58)
        on left: 52 54 56
        on right: 39 49 50 52
    @1 (59)
        on left: 51
        on right: 52
    @2 (60)
        on left: 53
        on right: 54
    @3 (61)
        on left: 55
        on right: 56
    callsuffix <stringval> (62)
        on left: 57 58
        on right: 54
    normcall <stringval> (63)
        on left: 61
        on right: 52 56 57
    $@4 (64)
        on left: 59
        on right: 61
    $@5 (65)
        on left: 60
        on right: 61
    methodcall <stringval> (66)
        on left: 64
        on right: 58
    $@6 (67)
        on left: 62
        on right: 64
    $@7 (68)
        on left: 63
        on right: 64
    elist <exprval> (69)
        on left: 65 66 67
        on right: 61 64 66 68 104
    objectdef <exprval> (70)
        on left: 68 69
        on right: 40
    indexed <exprval> (71)
        on left: 70 71
        on right: 69 71
    indexedelem <exprval> (72)
        on left: 74
        on right: 70 71
    $@8 (73)
        on left: 72
        on right: 74
    $@9 (74)
        on left: 73
        on right: 74
    temp_stmt <stringval> (75)
        on left: 75 76
        on right: 75 79 83
    block <stringval> (76)
        on left: 79
        on right: 10
    $@10 (77)
        on left: 77
        on right: 79
    $@11 (78)
        on left: 78
        on right: 79
    funcdef <exprval> (79)
        on left: 83
        on right: 11 37 41 56
    $@12 (80)
        on left: 80
        on right: 83
    $@13 (81)
        on left: 81
        on right: 83
    $@14 (82)
        on left: 82
        on right: 83
    funcprefix <exprval> (83)
        on left: 84 85
        on right: 83
    const <exprval> (84)
        on left: 86 87 88 89 90 91
        on right: 42
    idlist (85)
        on left: 92 93 94
        on right: 83 93
    ifstmt <stringval> (86)
        on left: 96 98
        on right: 4 98
    $@15 (87)
        on left: 95
        on right: 96
    $@16 (88)
        on left: 97
        on right: 98
    whilestmt <stringval> (89)
        on left: 101
        on right: 5
    $@17 (90)
        on left: 99
        on right: 101
    $@18 (91)
        on left: 100
        on right: 101
    forstmt <stringval> (92)
        on left: 104
        on right: 6
    $@19 (93)
        on left: 102
        on right: 104
    $@20 (94)
        on left: 103
        on right: 104
    returnstmt <exprval> (95)
        on left: 105 107
        on right: 7
    $@21 (96)
        on left: 106
        on right: 107


State 0

    0 $accept: . program $end

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    funcprefix  go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 1

   43 lvalue: ID .

    $default  reduce using rule 43 (lvalue)


State 2

   88 const: STRING .

    $default  reduce using rule 88 (const)


State 3

   86 const: INTEGER .

    $default  reduce using rule 86 (const)


State 4

   87 const: FLOAT .

    $default  reduce using rule 87 (const)


State 5

   96 ifstmt: IF . LEFT_PARENTH expr RIGHT_PARENTH $@15 stmt

    LEFT_PARENTH  shift, and go to state 43


State 6

  101 whilestmt: WHILE . $@17 LEFT_PARENTH expr RIGHT_PARENTH $@18 stmt

    $default  reduce using rule 99 ($@17)

    $@17  go to state 44


State 7

  104 forstmt: FOR . $@19 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@20 stmt

    $default  reduce using rule 102 ($@19)

    $@19  go to state 45


State 8

   84 funcprefix: FUNCTION . ID
   85           | FUNCTION .

    ID  shift, and go to state 46

    $default  reduce using rule 85 (funcprefix)


State 9

  105 returnstmt: RETURN . SEMICOLON
  107           | RETURN . $@21 expr SEMICOLON

    SEMICOLON  shift, and go to state 47

    $default  reduce using rule 106 ($@21)

    $@21  go to state 48


State 10

    8 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 49


State 11

    9 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 50


State 12

   30 term: NOT . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 51
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 13

   44 lvalue: LOCAL . ID

    ID  shift, and go to state 52


State 14

   90 const: TRUE .

    $default  reduce using rule 90 (const)


State 15

   91 const: FALSE .

    $default  reduce using rule 91 (const)


State 16

   89 const: NIL .

    $default  reduce using rule 89 (const)


State 17

   29 term: MINUS . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 18

   31 term: PLUS_PLUS . lvalue

    ID            shift, and go to state 1
    LOCAL         shift, and go to state 13
    LEFT_PARENTH  shift, and go to state 54
    DOUBLE_COLON  shift, and go to state 24

    lvalue  go to state 55
    member  go to state 32
    call    go to state 56


State 19

   33 term: MINUS_MINUS . lvalue

    ID            shift, and go to state 1
    LOCAL         shift, and go to state 13
    LEFT_PARENTH  shift, and go to state 54
    DOUBLE_COLON  shift, and go to state 24

    lvalue  go to state 57
    member  go to state 32
    call    go to state 56


State 20

   79 block: LEFT_BRACE . $@10 temp_stmt $@11 RIGHT_BRACE

    $default  reduce using rule 77 ($@10)

    $@10  go to state 58


State 21

   68 objectdef: LEFT_BRACKET . elist RIGHT_BRACKET
   69          | LEFT_BRACKET . indexed RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 59
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr         go to state 60
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 61
    objectdef    go to state 34
    indexed      go to state 62
    indexedelem  go to state 63
    const        go to state 38


State 22

   28 term: LEFT_PARENTH . expr RIGHT_PARENTH
   41 primary: LEFT_PARENTH . funcdef RIGHT_PARENTH
   56 call: LEFT_PARENTH . funcdef RIGHT_PARENTH @3 normcall

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    FUNCTION      shift, and go to state 8
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 64
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 65
    funcprefix  go to state 37
    const       go to state 38


State 23

   12 stmt: SEMICOLON .

    $default  reduce using rule 12 (stmt)


State 24

   45 lvalue: DOUBLE_COLON . ID

    ID  shift, and go to state 66


State 25

    0 $accept: program . $end

    $end  shift, and go to state 67


State 26

    1 program: stmt . program

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 68
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    funcprefix  go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 27

    3 stmt: expr . SEMICOLON
   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    SEMICOLON      shift, and go to state 82


State 28

   27 expr: term .

    $default  reduce using rule 27 (expr)


State 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


State 30

   35 term: primary .

    $default  reduce using rule 35 (term)


State 31

   32 term: lvalue . PLUS_PLUS
   34     | lvalue . MINUS_MINUS
   36 assignexpr: lvalue . ASSIGN expr
   37           | lvalue . ASSIGN funcdef
   38 primary: lvalue .
   47 member: lvalue . DOT ID
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   54 call: lvalue . @2 callsuffix

    ASSIGN        shift, and go to state 83
    PLUS_PLUS     shift, and go to state 84
    MINUS_MINUS   shift, and go to state 85
    LEFT_BRACKET  shift, and go to state 86
    DOT           shift, and go to state 87

    LEFT_PARENTH  reduce using rule 53 (@2)
    DOT_DOT       reduce using rule 53 (@2)
    $default      reduce using rule 38 (primary)

    @2  go to state 88


State 32

   46 lvalue: member .

    $default  reduce using rule 46 (lvalue)


State 33

   39 primary: call .
   49 member: call . DOT ID
   50       | call . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: call . @1 normcall

    LEFT_BRACKET  shift, and go to state 89
    DOT           shift, and go to state 90

    LEFT_PARENTH  reduce using rule 51 (@1)
    $default      reduce using rule 39 (primary)

    @1  go to state 91


State 34

   40 primary: objectdef .

    $default  reduce using rule 40 (primary)


State 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


State 36

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


State 37

   83 funcdef: funcprefix . $@12 LEFT_PARENTH $@13 idlist RIGHT_PARENTH LEFT_BRACE $@14 temp_stmt RIGHT_BRACE

    $default  reduce using rule 80 ($@12)

    $@12  go to state 92


State 38

   42 primary: const .

    $default  reduce using rule 42 (primary)


State 39

    4 stmt: ifstmt .
   98 ifstmt: ifstmt . ELSE $@16 stmt

    ELSE  shift, and go to state 93

    ELSE      [reduce using rule 4 (stmt)]
    $default  reduce using rule 4 (stmt)


State 40

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 41

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 42

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 43

   96 ifstmt: IF LEFT_PARENTH . expr RIGHT_PARENTH $@15 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 94
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 44

  101 whilestmt: WHILE $@17 . LEFT_PARENTH expr RIGHT_PARENTH $@18 stmt

    LEFT_PARENTH  shift, and go to state 95


State 45

  104 forstmt: FOR $@19 . LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@20 stmt

    LEFT_PARENTH  shift, and go to state 96


State 46

   84 funcprefix: FUNCTION ID .

    $default  reduce using rule 84 (funcprefix)


State 47

  105 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 105 (returnstmt)


State 48

  107 returnstmt: RETURN $@21 . expr SEMICOLON

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 97
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 49

    8 stmt: BREAK SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 50

    9 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 51

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   30 term: NOT expr .

    $default  reduce using rule 30 (term)


State 52

   44 lvalue: LOCAL ID .

    $default  reduce using rule 44 (lvalue)


State 53

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   29 term: MINUS expr .

    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    $default  reduce using rule 29 (term)


State 54

   56 call: LEFT_PARENTH . funcdef RIGHT_PARENTH @3 normcall

    FUNCTION  shift, and go to state 8

    funcdef     go to state 98
    funcprefix  go to state 37


State 55

   31 term: PLUS_PLUS lvalue .
   47 member: lvalue . DOT ID
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   54 call: lvalue . @2 callsuffix

    LEFT_BRACKET  shift, and go to state 86
    DOT           shift, and go to state 87

    LEFT_PARENTH  reduce using rule 53 (@2)
    DOT_DOT       reduce using rule 53 (@2)
    $default      reduce using rule 31 (term)

    @2  go to state 88


State 56

   49 member: call . DOT ID
   50       | call . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: call . @1 normcall

    LEFT_BRACKET  shift, and go to state 89
    DOT           shift, and go to state 90

    $default  reduce using rule 51 (@1)

    @1  go to state 91


State 57

   33 term: MINUS_MINUS lvalue .
   47 member: lvalue . DOT ID
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   54 call: lvalue . @2 callsuffix

    LEFT_BRACKET  shift, and go to state 86
    DOT           shift, and go to state 87

    LEFT_PARENTH  reduce using rule 53 (@2)
    DOT_DOT       reduce using rule 53 (@2)
    $default      reduce using rule 33 (term)

    @2  go to state 88


State 58

   79 block: LEFT_BRACE $@10 . temp_stmt $@11 RIGHT_BRACE

    $default  reduce using rule 76 (temp_stmt)

    temp_stmt  go to state 99


State 59

   74 indexedelem: LEFT_BRACE . $@8 expr COLON $@9 expr RIGHT_BRACE

    $default  reduce using rule 72 ($@8)

    $@8  go to state 100


State 60

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   65 elist: expr .

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81

    $default  reduce using rule 65 (elist)


State 61

   66 elist: elist . COMMA expr
   68 objectdef: LEFT_BRACKET elist . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 101
    COMMA          shift, and go to state 102


State 62

   69 objectdef: LEFT_BRACKET indexed . RIGHT_BRACKET
   71 indexed: indexed . COMMA indexedelem

    RIGHT_BRACKET  shift, and go to state 103
    COMMA          shift, and go to state 104


State 63

   70 indexed: indexedelem .

    $default  reduce using rule 70 (indexed)


State 64

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   28 term: LEFT_PARENTH expr . RIGHT_PARENTH

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    RIGHT_PARENTH  shift, and go to state 105


State 65

   41 primary: LEFT_PARENTH funcdef . RIGHT_PARENTH
   56 call: LEFT_PARENTH funcdef . RIGHT_PARENTH @3 normcall

    RIGHT_PARENTH  shift, and go to state 106


State 66

   45 lvalue: DOUBLE_COLON ID .

    $default  reduce using rule 45 (lvalue)


State 67

    0 $accept: program $end .

    $default  accept


State 68

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 69

   25 expr: expr AND . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 107
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 70

   26 expr: expr OR . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 108
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 71

   14 expr: expr PLUS . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 109
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 72

   15 expr: expr MINUS . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 110
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 73

   16 expr: expr MUL . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 111
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 74

   17 expr: expr DIV . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 112
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 75

   18 expr: expr MODULO . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 113
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 76

   23 expr: expr EQUAL . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 114
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 77

   24 expr: expr NOT_EQUAL . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 115
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 78

   19 expr: expr GREATER . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 116
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 79

   21 expr: expr LESS . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 117
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 80

   20 expr: expr GREATER_EQUAL . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 118
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 81

   22 expr: expr LESS_EQUAL . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 119
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 82

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


State 83

   36 assignexpr: lvalue ASSIGN . expr
   37           | lvalue ASSIGN . funcdef

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    FUNCTION      shift, and go to state 8
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 120
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 121
    funcprefix  go to state 37
    const       go to state 38


State 84

   32 term: lvalue PLUS_PLUS .

    $default  reduce using rule 32 (term)


State 85

   34 term: lvalue MINUS_MINUS .

    $default  reduce using rule 34 (term)


State 86

   48 member: lvalue LEFT_BRACKET . expr RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 122
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 87

   47 member: lvalue DOT . ID

    ID  shift, and go to state 123


State 88

   54 call: lvalue @2 . callsuffix

    LEFT_PARENTH  shift, and go to state 124
    DOT_DOT       shift, and go to state 125

    callsuffix  go to state 126
    normcall    go to state 127
    methodcall  go to state 128


State 89

   50 member: call LEFT_BRACKET . expr RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 129
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 90

   49 member: call DOT . ID

    ID  shift, and go to state 130


State 91

   52 call: call @1 . normcall

    LEFT_PARENTH  shift, and go to state 124

    normcall  go to state 131


State 92

   83 funcdef: funcprefix $@12 . LEFT_PARENTH $@13 idlist RIGHT_PARENTH LEFT_BRACE $@14 temp_stmt RIGHT_BRACE

    LEFT_PARENTH  shift, and go to state 132


State 93

   98 ifstmt: ifstmt ELSE . $@16 stmt

    $default  reduce using rule 97 ($@16)

    $@16  go to state 133


State 94

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   96 ifstmt: IF LEFT_PARENTH expr . RIGHT_PARENTH $@15 stmt

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    RIGHT_PARENTH  shift, and go to state 134


State 95

  101 whilestmt: WHILE $@17 LEFT_PARENTH . expr RIGHT_PARENTH $@18 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 135
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 96

  104 forstmt: FOR $@19 LEFT_PARENTH . elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@20 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 136
    objectdef   go to state 34
    const       go to state 38


State 97

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
  107 returnstmt: RETURN $@21 expr . SEMICOLON

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    SEMICOLON      shift, and go to state 137


State 98

   56 call: LEFT_PARENTH funcdef . RIGHT_PARENTH @3 normcall

    RIGHT_PARENTH  shift, and go to state 138


State 99

   75 temp_stmt: temp_stmt . stmt
   79 block: LEFT_BRACE $@10 temp_stmt . $@11 RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 78 ($@11)

    stmt        go to state 139
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    $@11        go to state 140
    funcdef     go to state 36
    funcprefix  go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 100

   74 indexedelem: LEFT_BRACE $@8 . expr COLON $@9 expr RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 141
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 101

   68 objectdef: LEFT_BRACKET elist RIGHT_BRACKET .

    $default  reduce using rule 68 (objectdef)


State 102

   66 elist: elist COMMA . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 142
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 103

   69 objectdef: LEFT_BRACKET indexed RIGHT_BRACKET .

    $default  reduce using rule 69 (objectdef)


State 104

   71 indexed: indexed COMMA . indexedelem

    LEFT_BRACE  shift, and go to state 59

    indexedelem  go to state 143


State 105

   28 term: LEFT_PARENTH expr RIGHT_PARENTH .

    $default  reduce using rule 28 (term)


State 106

   41 primary: LEFT_PARENTH funcdef RIGHT_PARENTH .
   56 call: LEFT_PARENTH funcdef RIGHT_PARENTH . @3 normcall

    LEFT_PARENTH  reduce using rule 55 (@3)
    $default      reduce using rule 41 (primary)

    @3  go to state 144


State 107

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   25     | expr AND expr .
   26     | expr . OR expr

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81

    $default  reduce using rule 25 (expr)


State 108

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   26     | expr OR expr .

    AND            shift, and go to state 69
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81

    $default  reduce using rule 26 (expr)


State 109

   14 expr: expr . PLUS expr
   14     | expr PLUS expr .
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    $default  reduce using rule 14 (expr)


State 110

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   15     | expr MINUS expr .
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    $default  reduce using rule 15 (expr)


State 111

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   16     | expr MUL expr .
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 16 (expr)


State 112

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   17     | expr DIV expr .
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 17 (expr)


State 113

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   18     | expr MODULO expr .
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 18 (expr)


State 114

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   23     | expr EQUAL expr .
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81

    EQUAL      error (nonassociative)
    NOT_EQUAL  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 115

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   24     | expr NOT_EQUAL expr .
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81

    EQUAL      error (nonassociative)
    NOT_EQUAL  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 116

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   19     | expr GREATER expr .
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS    shift, and go to state 71
    MINUS   shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    GREATER        error (nonassociative)
    LESS           error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 19 (expr)


State 117

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   21     | expr LESS expr .
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS    shift, and go to state 71
    MINUS   shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    GREATER        error (nonassociative)
    LESS           error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 21 (expr)


State 118

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   20     | expr GREATER_EQUAL expr .
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS    shift, and go to state 71
    MINUS   shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    GREATER        error (nonassociative)
    LESS           error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 20 (expr)


State 119

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   22     | expr LESS_EQUAL expr .
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS    shift, and go to state 71
    MINUS   shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    MODULO  shift, and go to state 75

    GREATER        error (nonassociative)
    LESS           error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 22 (expr)


State 120

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   36 assignexpr: lvalue ASSIGN expr .

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81

    $default  reduce using rule 36 (assignexpr)


State 121

   37 assignexpr: lvalue ASSIGN funcdef .

    $default  reduce using rule 37 (assignexpr)


State 122

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   48 member: lvalue LEFT_BRACKET expr . RIGHT_BRACKET

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    RIGHT_BRACKET  shift, and go to state 145


State 123

   47 member: lvalue DOT ID .

    $default  reduce using rule 47 (member)


State 124

   61 normcall: LEFT_PARENTH . $@4 elist $@5 RIGHT_PARENTH

    $default  reduce using rule 59 ($@4)

    $@4  go to state 146


State 125

   64 methodcall: DOT_DOT . ID LEFT_PARENTH $@6 elist $@7 RIGHT_PARENTH

    ID  shift, and go to state 147


State 126

   54 call: lvalue @2 callsuffix .

    $default  reduce using rule 54 (call)


State 127

   57 callsuffix: normcall .

    $default  reduce using rule 57 (callsuffix)


State 128

   58 callsuffix: methodcall .

    $default  reduce using rule 58 (callsuffix)


State 129

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   50 member: call LEFT_BRACKET expr . RIGHT_BRACKET

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    RIGHT_BRACKET  shift, and go to state 148


State 130

   49 member: call DOT ID .

    $default  reduce using rule 49 (member)


State 131

   52 call: call @1 normcall .

    $default  reduce using rule 52 (call)


State 132

   83 funcdef: funcprefix $@12 LEFT_PARENTH . $@13 idlist RIGHT_PARENTH LEFT_BRACE $@14 temp_stmt RIGHT_BRACE

    $default  reduce using rule 81 ($@13)

    $@13  go to state 149


State 133

   98 ifstmt: ifstmt ELSE $@16 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 150
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    funcprefix  go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 134

   96 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH . $@15 stmt

    $default  reduce using rule 95 ($@15)

    $@15  go to state 151


State 135

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
  101 whilestmt: WHILE $@17 LEFT_PARENTH expr . RIGHT_PARENTH $@18 stmt

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    RIGHT_PARENTH  shift, and go to state 152


State 136

   66 elist: elist . COMMA expr
  104 forstmt: FOR $@19 LEFT_PARENTH elist . SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@20 stmt

    SEMICOLON  shift, and go to state 153
    COMMA      shift, and go to state 102


State 137

  107 returnstmt: RETURN $@21 expr SEMICOLON .

    $default  reduce using rule 107 (returnstmt)


State 138

   56 call: LEFT_PARENTH funcdef RIGHT_PARENTH . @3 normcall

    $default  reduce using rule 55 (@3)

    @3  go to state 144


State 139

   75 temp_stmt: temp_stmt stmt .

    $default  reduce using rule 75 (temp_stmt)


State 140

   79 block: LEFT_BRACE $@10 temp_stmt $@11 . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 154


State 141

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   74 indexedelem: LEFT_BRACE $@8 expr . COLON $@9 expr RIGHT_BRACE

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    COLON          shift, and go to state 155


State 142

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   66 elist: elist COMMA expr .

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81

    $default  reduce using rule 66 (elist)


State 143

   71 indexed: indexed COMMA indexedelem .

    $default  reduce using rule 71 (indexed)


State 144

   56 call: LEFT_PARENTH funcdef RIGHT_PARENTH @3 . normcall

    LEFT_PARENTH  shift, and go to state 124

    normcall  go to state 156


State 145

   48 member: lvalue LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 48 (member)


State 146

   61 normcall: LEFT_PARENTH $@4 . elist $@5 RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 157
    objectdef   go to state 34
    const       go to state 38


State 147

   64 methodcall: DOT_DOT ID . LEFT_PARENTH $@6 elist $@7 RIGHT_PARENTH

    LEFT_PARENTH  shift, and go to state 158


State 148

   50 member: call LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 50 (member)


State 149

   83 funcdef: funcprefix $@12 LEFT_PARENTH $@13 . idlist RIGHT_PARENTH LEFT_BRACE $@14 temp_stmt RIGHT_BRACE

    ID  shift, and go to state 159

    $default  reduce using rule 94 (idlist)

    idlist  go to state 160


State 150

   98 ifstmt: ifstmt ELSE $@16 stmt .

    $default  reduce using rule 98 (ifstmt)


State 151

   96 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH $@15 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 161
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    funcprefix  go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 152

  101 whilestmt: WHILE $@17 LEFT_PARENTH expr RIGHT_PARENTH . $@18 stmt

    $default  reduce using rule 100 ($@18)

    $@18  go to state 162


State 153

  104 forstmt: FOR $@19 LEFT_PARENTH elist SEMICOLON . expr SEMICOLON elist RIGHT_PARENTH $@20 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 163
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 154

   79 block: LEFT_BRACE $@10 temp_stmt $@11 RIGHT_BRACE .

    $default  reduce using rule 79 (block)


State 155

   74 indexedelem: LEFT_BRACE $@8 expr COLON . $@9 expr RIGHT_BRACE

    $default  reduce using rule 73 ($@9)

    $@9  go to state 164


State 156

   56 call: LEFT_PARENTH funcdef RIGHT_PARENTH @3 normcall .

    $default  reduce using rule 56 (call)


State 157

   61 normcall: LEFT_PARENTH $@4 elist . $@5 RIGHT_PARENTH
   66 elist: elist . COMMA expr

    COMMA  shift, and go to state 102

    $default  reduce using rule 60 ($@5)

    $@5  go to state 165


State 158

   64 methodcall: DOT_DOT ID LEFT_PARENTH . $@6 elist $@7 RIGHT_PARENTH

    $default  reduce using rule 62 ($@6)

    $@6  go to state 166


State 159

   92 idlist: ID .

    $default  reduce using rule 92 (idlist)


State 160

   83 funcdef: funcprefix $@12 LEFT_PARENTH $@13 idlist . RIGHT_PARENTH LEFT_BRACE $@14 temp_stmt RIGHT_BRACE
   93 idlist: idlist . COMMA ID

    RIGHT_PARENTH  shift, and go to state 167
    COMMA          shift, and go to state 168


State 161

   96 ifstmt: IF LEFT_PARENTH expr RIGHT_PARENTH $@15 stmt .

    $default  reduce using rule 96 (ifstmt)


State 162

  101 whilestmt: WHILE $@17 LEFT_PARENTH expr RIGHT_PARENTH $@18 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 169
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    funcprefix  go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 163

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
  104 forstmt: FOR $@19 LEFT_PARENTH elist SEMICOLON expr . SEMICOLON elist RIGHT_PARENTH $@20 stmt

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    SEMICOLON      shift, and go to state 170


State 164

   74 indexedelem: LEFT_BRACE $@8 expr COLON $@9 . expr RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    expr        go to state 171
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 38


State 165

   61 normcall: LEFT_PARENTH $@4 elist $@5 . RIGHT_PARENTH

    RIGHT_PARENTH  shift, and go to state 172


State 166

   64 methodcall: DOT_DOT ID LEFT_PARENTH $@6 . elist $@7 RIGHT_PARENTH

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 173
    objectdef   go to state 34
    const       go to state 38


State 167

   83 funcdef: funcprefix $@12 LEFT_PARENTH $@13 idlist RIGHT_PARENTH . LEFT_BRACE $@14 temp_stmt RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 174


State 168

   93 idlist: idlist COMMA . ID

    ID  shift, and go to state 175


State 169

  101 whilestmt: WHILE $@17 LEFT_PARENTH expr RIGHT_PARENTH $@18 stmt .

    $default  reduce using rule 101 (whilestmt)


State 170

  104 forstmt: FOR $@19 LEFT_PARENTH elist SEMICOLON expr SEMICOLON . elist RIGHT_PARENTH $@20 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    DOUBLE_COLON  shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 176
    objectdef   go to state 34
    const       go to state 38


State 171

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MODULO expr
   19     | expr . GREATER expr
   20     | expr . GREATER_EQUAL expr
   21     | expr . LESS expr
   22     | expr . LESS_EQUAL expr
   23     | expr . EQUAL expr
   24     | expr . NOT_EQUAL expr
   25     | expr . AND expr
   26     | expr . OR expr
   74 indexedelem: LEFT_BRACE $@8 expr COLON $@9 expr . RIGHT_BRACE

    AND            shift, and go to state 69
    OR             shift, and go to state 70
    PLUS           shift, and go to state 71
    MINUS          shift, and go to state 72
    MUL            shift, and go to state 73
    DIV            shift, and go to state 74
    MODULO         shift, and go to state 75
    EQUAL          shift, and go to state 76
    NOT_EQUAL      shift, and go to state 77
    GREATER        shift, and go to state 78
    LESS           shift, and go to state 79
    GREATER_EQUAL  shift, and go to state 80
    LESS_EQUAL     shift, and go to state 81
    RIGHT_BRACE    shift, and go to state 177


State 172

   61 normcall: LEFT_PARENTH $@4 elist $@5 RIGHT_PARENTH .

    $default  reduce using rule 61 (normcall)


State 173

   64 methodcall: DOT_DOT ID LEFT_PARENTH $@6 elist . $@7 RIGHT_PARENTH
   66 elist: elist . COMMA expr

    COMMA  shift, and go to state 102

    $default  reduce using rule 63 ($@7)

    $@7  go to state 178


State 174

   83 funcdef: funcprefix $@12 LEFT_PARENTH $@13 idlist RIGHT_PARENTH LEFT_BRACE . $@14 temp_stmt RIGHT_BRACE

    $default  reduce using rule 82 ($@14)

    $@14  go to state 179


State 175

   93 idlist: idlist COMMA ID .

    $default  reduce using rule 93 (idlist)


State 176

   66 elist: elist . COMMA expr
  104 forstmt: FOR $@19 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist . RIGHT_PARENTH $@20 stmt

    RIGHT_PARENTH  shift, and go to state 180
    COMMA          shift, and go to state 102


State 177

   74 indexedelem: LEFT_BRACE $@8 expr COLON $@9 expr RIGHT_BRACE .

    $default  reduce using rule 74 (indexedelem)


State 178

   64 methodcall: DOT_DOT ID LEFT_PARENTH $@6 elist $@7 . RIGHT_PARENTH

    RIGHT_PARENTH  shift, and go to state 181


State 179

   83 funcdef: funcprefix $@12 LEFT_PARENTH $@13 idlist RIGHT_PARENTH LEFT_BRACE $@14 . temp_stmt RIGHT_BRACE

    $default  reduce using rule 76 (temp_stmt)

    temp_stmt  go to state 182


State 180

  104 forstmt: FOR $@19 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH . $@20 stmt

    $default  reduce using rule 103 ($@20)

    $@20  go to state 183


State 181

   64 methodcall: DOT_DOT ID LEFT_PARENTH $@6 elist $@7 RIGHT_PARENTH .

    $default  reduce using rule 64 (methodcall)


State 182

   75 temp_stmt: temp_stmt . stmt
   83 funcdef: funcprefix $@12 LEFT_PARENTH $@13 idlist RIGHT_PARENTH LEFT_BRACE $@14 temp_stmt . RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    RIGHT_BRACE   shift, and go to state 184
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 139
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    funcprefix  go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 183

  104 forstmt: FOR $@19 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@20 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    NOT           shift, and go to state 12
    LOCAL         shift, and go to state 13
    TRUE          shift, and go to state 14
    FALSE         shift, and go to state 15
    NIL           shift, and go to state 16
    MINUS         shift, and go to state 17
    PLUS_PLUS     shift, and go to state 18
    MINUS_MINUS   shift, and go to state 19
    LEFT_BRACE    shift, and go to state 20
    LEFT_BRACKET  shift, and go to state 21
    LEFT_PARENTH  shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    DOUBLE_COLON  shift, and go to state 24

    stmt        go to state 185
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    funcprefix  go to state 37
    const       go to state 38
    ifstmt      go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


State 184

   83 funcdef: funcprefix $@12 LEFT_PARENTH $@13 idlist RIGHT_PARENTH LEFT_BRACE $@14 temp_stmt RIGHT_BRACE .

    $default  reduce using rule 83 (funcdef)


State 185

  104 forstmt: FOR $@19 LEFT_PARENTH elist SEMICOLON expr SEMICOLON elist RIGHT_PARENTH $@20 stmt .

    $default  reduce using rule 104 (forstmt)
